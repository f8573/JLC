// build.gradle (Groovy DSL)
plugins {
    id 'java'
}

group = 'net.faulj'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

// Utility methods for determining OS and Architecture
def static getOsString() {
    String vendor = System.getProperty("java.vendor")
    if ("The Android Project" == vendor) {
        return "android"
    } else {
        String osName = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)
        if (osName.startsWith("windows")) {
            return "windows"
        } else if (osName.startsWith("mac os")) {
            return "apple"
        } else if (osName.startsWith("linux")) {
            return "linux"
        } else if (osName.startsWith("sun")) {
            return "sun"
        }
        return "unknown"
    }
}

def static getArchString() {
    String osArch = System.getProperty("os.arch").toLowerCase(Locale.ENGLISH)
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
        return "x86"
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
        return "x86_64"
    } else if (osArch.startsWith("arm64")) {
        return "arm64"
    } else if (osArch.startsWith("arm")) {
        return "arm"
    } else if ("ppc" == osArch || "powerpc" == osArch) {
        return "ppc"
    } else if (osArch.startsWith("ppc")) {
        return "ppc_64"
    } else if (osArch.startsWith("sparc")) {
        return "sparc"
    } else if (osArch.startsWith("mips64")) {
        return "mips64"
    } else if (osArch.startsWith("mips")) {
        return "mips"
    } else if (osArch.contains("risc")) {
        return "risc"
    }
    return "unknown"
}

dependencies {
    // JUnit dependency for testing
    testImplementation 'junit:junit:4.13.2'

    // Set the JCuda version (modify as needed)
    def jCudaVersion = "11.0.0"

    // Determine the classifier for native libraries based on OS and Architecture
    def classifier = getOsString() + "-" + getArchString()

    // JCuda Java libraries (setting transitive to false to avoid unnecessary dependencies)
    implementation(group: 'org.jcuda', name: 'jcuda', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcublas', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcufft', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcusparse', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcurand', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcusolver', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcudnn', version: jCudaVersion) {
        transitive = false
    }

    // JCuda native libraries (using the classifier for current OS/Architecture)
    implementation group: 'org.jcuda', name: 'jcuda-natives', classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcublas-natives', classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcufft-natives', classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcusparse-natives', classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcurand-natives', classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcusolver-natives', classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcudnn-natives', classifier: classifier, version: jCudaVersion
}